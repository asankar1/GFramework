name: CMake

on: 
  push:
    branches:
      - integration


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-latest
    
    strategy:
      fail-fast: false
      matrix:
        build_config: [Release, Debug, RelWithDebInfo]
        build_toolset: [v140, v141]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Checkout submodule third_party/lua
      run: git submodule update --init third_party/lua
      
    - name: Checkout submodule third_party/glm
      run: git submodule update --init third_party/glm

    - name: Configure CMake for GFramework with configuration ${{ matrix.build_config }}
      run: cmake -B ${{github.workspace}}/build_${{ matrix.build_toolset }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -G "Visual Studio 16 2019" -A x64 -T ${{ matrix.build_toolset }}

    - name: Build GFramework with configuration ${{ matrix.build_config }}
      run: cmake --build ${{github.workspace}}/build_${{ matrix.build_toolset }} --config ${{ matrix.build_config }} --target install
      
    - name: Configure CMake for Unit test with configuration ${{ matrix.build_config }}
      run: cmake UnitTest -B ${{github.workspace}}/UnitTest/build_${{ matrix.build_toolset }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/UnitTest/output/build_${{ matrix.build_toolset }}/ -G "Visual Studio 16 2019" -A x64 -T ${{ matrix.build_toolset }}

    - name: Build Unit test with configuration ${{ matrix.build_config }}
      run: cmake --build ${{github.workspace}}/UnitTest/build_${{ matrix.build_toolset }} --config ${{ matrix.build_config }} --target install      
      
    - name: Run Unit test
      run: |
        cd ${{github.workspace}}/UnitTest/output/build_${{ matrix.build_toolset }}/test/${{ matrix.build_config }}
        .\gframework_static_test.exe --gtest_output="xml:${{github.workspace}}/UnitTest/Reports/Windows_${{ matrix.build_toolset }}_${{ matrix.build_config }}_Report.xml"
        
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1.19
      if: always()
      with:
        files: ${{github.workspace}}/UnitTest/Reports/*.xml
      
    - name: Verify New or Changed report files
      if: ${{ success() }}
      uses: tj-actions/verify-changed-files@v7.1
      id: verify-changed-files
      with:
          files: |
             ${{github.workspace}}/UnitTest/Reports
  
    - name: setup git config to commit the reports
      if: steps.verify-changed-files.outputs.files_changed == 'true' && ${{ success() }}
      run: |
          echo "Changed files: ${{ steps.verify_changed_files.outputs.changed_files }}"
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          cd ${{github.workspace}}
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

    - name: commit the reports
      if: steps.verify-changed-files.outputs.files_changed == 'true' && ${{ success() }}
      run: |
          # Stage the file, commit and push
          cd ${{github.workspace}}
          git pull
          git add UnitTest/Reports/*.xml
          git commit -m "Updated auto-generated unit test reports"
          git push origin ci_setup
    
